# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16lFDTH3G7bMn16bxMRcyCk-JnNIofY9I
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import pickle
import gradio as gr
from google.colab import files

# Step 1: Upload the CSV File for Dataset (in Google Colab)
uploaded = files.upload()  # This will prompt you to upload the CSV file
file_name = list(uploaded.keys())[0]  # Get the uploaded file name

# Step 2: Load and Preprocess the Dataset
def load_dataset(file_path):
    df = pd.read_csv(file_path)  # Read uploaded CSV

    # Preprocessing
    df.columns = df.columns.str.strip()  # Remove spaces from column names
    df['Building Type'] = df['Building Type'].map({'Residential': 0, 'Commercial': 1})
    df['Day of Week'] = df['Day of Week'].map({'Weekday': 0, 'Weekend': 1})

    # Features and target variable
    X = df[['Building Type', 'Square Footage', 'Number of Occupants', 'Appliances Used', 'Average Temperature', 'Day of Week']]
    y = df['Energy Consumption']

    return X, y

# Step 3: Train the Machine Learning Model
def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)

    # Model evaluation
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Model Performance: Mean Squared Error = {mse:.2f}")

    # Save model
    with open("energy_model.pkl", "wb") as file:
        pickle.dump(model, file)
    print("Model saved as 'energy_model.pkl'")

    return model

# Step 4: Load Model or Train a New One
try:
    with open("energy_model.pkl", "rb") as file:
        model = pickle.load(file)
    print("Loaded existing model.")
except FileNotFoundError:
    print("Training new model...")
    X, y = load_dataset(file_name)  # Use the uploaded dataset
    model = train_model(X, y)

# Step 5: Prediction Function with Tips and Plot
def predict_energy_consumption(building_type, square_footage, occupants, appliances, temperature, day_of_week):
    # Map input values
    building_type = 1 if building_type == "Commercial" else 0
    day_of_week = 1 if day_of_week == "Weekend" else 0

    # Prepare the input for the model
    features = np.array([[building_type, square_footage, occupants, appliances, temperature, day_of_week]])
    prediction = model.predict(features)[0]

    # Calculate average energy consumption from the training data (for comparison)
    data = pd.read_csv(file_name)
    avg_consumption = data['Energy Consumption'].mean()

    # Determine tips
    tips = ""
    if prediction > avg_consumption:
        tips = """
        Your predicted energy consumption is higher than the average. Here are some tips to reduce it:
        1. Use energy-efficient appliances.
        2. Install proper insulation to reduce heating/cooling energy usage.
        3. Use programmable thermostats to manage energy usage more effectively.
        4. Switch off lights and appliances when not in use.
        5. Utilize natural lighting during the day.
        6. Seal windows and doors to prevent drafts.
        7. Consider solar panels for long-term savings.
        """

    # Create a bar plot comparing predicted vs average energy consumption
    plt.figure(figsize=(6, 4))
    plt.bar(['Predicted', 'Average'], [prediction, avg_consumption], color=['blue', 'orange'])
    plt.ylabel('Energy Consumption (kWh)')
    plt.title('Energy Consumption Comparison')
    plt.tight_layout()  # Ensure everything fits well on the plot
    plt.savefig('/tmp/energy_comparison_plot.png')  # Save plot as an image file

    return f"Predicted Energy Consumption: {prediction:.2f} kWh\n{tips}", '/tmp/energy_comparison_plot.png'

# Step 6: Gradio Interface
inputs = [
    gr.Radio(["Residential", "Commercial"], label="Building Type"),
    gr.Number(label="Square Footage (in sq. ft.)"),
    gr.Number(label="Number of Occupants"),
    gr.Number(label="Number of Appliances Used"),
    gr.Slider(-30, 50, step=1, label="Average Temperature (Â°C)"),
    gr.Radio(["Weekday", "Weekend"], label="Day of Week"),
]
outputs = [
    gr.Textbox(label="Energy Consumption Prediction"),
    gr.Image(label="Energy Consumption Comparison Plot")  # Output for the image plot
]

# Create the Gradio Interface
app = gr.Interface(fn=predict_energy_consumption, inputs=inputs, outputs=outputs)

# Step 7: Launch the Gradio App
app.launch(share=True)

!pip install gradio
